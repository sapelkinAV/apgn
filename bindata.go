// Code generated by go-bindata.
// sources:
// data/Function.kt
// data/build.gradle
// data/function.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataFunctionKt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x91\x41\x4e\xf3\x30\x10\x85\xf7\x3e\xc5\xa8\xab\x46\xfa\xe5\x03\x44\xea\xea\x17\x6c\x41\xc0\x05\x06\x77\xda\x58\xd8\xe3\xe0\x19\x87\x2a\x51\xee\x8e\x52\x57\x55\x89\x10\x2c\x99\xe5\xbc\xe7\xe7\xcf\x7e\x3d\xba\x37\x3c\x12\x30\x46\x7a\x38\xbc\x74\xf4\x58\x17\xc6\xf8\xd8\xa7\xac\xe0\x52\xb4\x18\x71\x4c\x8c\x1f\x62\x85\xf2\xe0\x1d\x89\x0d\x18\x5f\xf7\x68\x73\x61\xf5\x91\xec\xff\xc4\x4a\x27\x35\xc6\x05\x14\x81\xfb\xc2\x4e\x7d\x62\x98\x8c\x01\x00\xa8\xdb\xbb\x13\xc6\x3e\xd0\x13\xbd\x17\x12\x85\xe9\x2c\x2d\x33\x60\x86\x8e\x42\x48\x2d\x3c\x6b\xf6\x7c\x84\x1d\x6c\x70\xc4\x11\x37\xe6\x6a\x72\x89\x45\x73\x71\x9a\xf2\xf6\x8b\xb9\xb9\x49\x5a\x46\x3b\x2f\xf6\xec\x80\x5d\x8d\xbd\xca\xf3\xf7\x71\x0d\x4c\xb3\xb9\xd1\x57\xb8\xd2\x27\x16\xfa\x8d\x77\xc4\xf1\x0f\x91\x0f\x85\xa1\x43\xde\x07\xca\x5b\x1a\x88\xb5\x5d\x7d\xf7\xbf\xe5\xf8\xd2\x51\x0b\x97\xb2\x9a\xf6\x87\x27\x66\xd2\x92\x79\x6d\xa8\xd1\x95\xb4\xb9\x5c\x3f\x9b\xcf\x00\x00\x00\xff\xff\x66\xaa\xdc\xd4\x44\x02\x00\x00")

func dataFunctionKtBytes() ([]byte, error) {
	return bindataRead(
		_dataFunctionKt,
		"data/Function.kt",
	)
}

func dataFunctionKt() (*asset, error) {
	bytes, err := dataFunctionKtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/Function.kt", size: 580, mode: os.FileMode(493), modTime: time.Unix(1501445169, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataBuildGradle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6b\x1b\x31\x10\xbd\xeb\x57\x08\x53\x90\x4d\xba\x4a\x0d\x3d\x94\x05\x9f\xd2\x53\x0a\x2d\xb4\x3f\xa0\xcc\x6a\x27\xce\x38\x5a\x49\xcc\xcc\x3a\x71\x8b\xff\x7b\xd9\x8f\x38\x75\x62\xb2\x07\x2d\x68\xde\xcc\xbc\xf7\xf4\x9a\x9e\x62\x2b\x81\xa9\xa8\xfd\x6b\xac\xb5\x16\x9f\xd4\x3f\x64\x8d\x94\x7e\xef\x91\x85\x72\xb2\x1b\xeb\xd6\x7e\xed\xaf\xdc\x08\x60\x2c\x59\x48\x33\x13\xca\xdc\x33\x7c\x1d\xec\x31\xdd\x60\x52\x86\xb8\x5c\x8d\xd7\xc7\xf1\x6c\xb1\x60\x6a\x31\x85\x73\x7c\x88\x20\x52\x40\xef\xed\x22\xf3\xd6\xef\x50\x1b\x06\x4a\x32\x2f\xaf\xa7\x5f\xb5\x65\x68\x23\x56\x25\xf6\x5b\x4a\xf5\x87\x73\x66\x8b\x79\xcd\xd1\x18\x03\xa5\xc4\x83\x9d\x71\xd6\xed\x60\x0f\xee\xf5\xe5\xd4\xed\x8c\xb9\xa0\xe1\x15\xff\xa3\x31\x92\x7b\x0e\x78\x93\xbb\x02\x4a\x0d\x45\xd2\x83\xdd\xd8\xb5\xff\x62\x14\x78\x8b\x7a\xa9\x62\x2e\xa8\x0d\xb9\x2b\x14\xd1\x2e\x4f\xda\x5d\xc8\x9d\x87\x0e\xfe\xe4\x04\x8f\x52\xc3\xa3\x54\x11\xba\xa6\x85\x6a\xa0\x5d\x85\xcc\x58\x0f\x8e\x7f\x72\x1f\xc7\x9e\xd5\xd9\x9c\x77\xfd\x12\x6d\x23\x35\x97\x8d\x52\x94\x91\xf4\x30\xc4\xed\xfa\x44\x5a\x4f\xe7\x67\xbf\x5e\xbb\x37\x90\x77\xf7\x0c\xc0\x6a\xea\x7e\xb3\xeb\x68\x8c\x82\x3c\xd8\x31\x5c\xb7\xc0\x4b\x3d\x14\xac\xed\x2d\xf0\x6a\xb6\x04\x38\xdc\xd3\x1e\xbf\x43\x87\x76\x63\x17\x50\xf0\xc9\xef\x80\x27\x9a\x77\x9c\xbb\x67\xb1\xdf\xc6\xd1\x2f\xd7\x85\x73\x40\x91\x9f\x38\x3d\x8e\x8c\x15\x4a\x9a\x97\x2e\x52\xe3\x56\xff\x05\x6c\x1e\x93\xee\x68\xdb\x33\x28\xe5\x24\x9e\xfb\xa4\xd4\xe1\x29\x36\xd3\x94\x5f\xa8\x2f\x29\xa0\x34\x2b\xf5\xc2\xe1\x2b\xb1\xd8\xab\x8d\x75\xc2\xe1\x7a\xa8\x5d\x3f\x47\xe8\x04\x1e\x5e\xec\x32\x74\x8a\xe0\xd1\x98\xd1\x07\x3f\x25\x43\x7e\xa4\x93\x2f\xc6\xfc\x0b\x00\x00\xff\xff\x6d\x0d\x46\x06\x7f\x03\x00\x00")

func dataBuildGradleBytes() ([]byte, error) {
	return bindataRead(
		_dataBuildGradle,
		"data/build.gradle",
	)
}

func dataBuildGradle() (*asset, error) {
	bytes, err := dataBuildGradleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/build.gradle", size: 895, mode: os.FileMode(420), modTime: time.Unix(1501331974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataFunctionJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\x31\xce\xc2\x30\x0c\x46\xf7\x9c\xe2\x93\xe7\xea\x3f\x40\x0e\xf0\xaf\x30\x70\x01\x93\x98\x36\x34\x75\x50\xda\xb0\xa0\xde\x1d\x99\x80\xc4\xc0\xf8\xe9\xbd\x67\x3f\x1c\x40\x51\xd6\x50\xd3\x6d\x4b\x45\xc9\x83\x94\x17\x39\x5c\x4e\x93\x1c\x39\xcc\x3c\x0a\x0d\x26\x4d\xac\x31\x4b\xfd\x25\xfc\xfd\x37\x0d\x56\x7b\xff\xb1\x5e\x49\x6d\xba\xa5\x45\x2c\xb9\xf2\x9d\xdf\x77\x4a\x99\x57\xf2\xb0\xcf\x00\x9d\x5b\xca\xd1\x8c\xb1\x72\xcc\x82\xbe\x87\x0e\x43\x16\xd6\x2f\xd8\xb7\x03\x76\xb7\xbb\x67\x00\x00\x00\xff\xff\x20\xc6\xc5\xfe\xbb\x00\x00\x00")

func dataFunctionJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataFunctionJson,
		"data/function.json",
	)
}

func dataFunctionJson() (*asset, error) {
	bytes, err := dataFunctionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/function.json", size: 187, mode: os.FileMode(420), modTime: time.Unix(1501445384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/Function.kt": dataFunctionKt,
	"data/build.gradle": dataBuildGradle,
	"data/function.json": dataFunctionJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"Function.kt": &bintree{dataFunctionKt, map[string]*bintree{}},
		"build.gradle": &bintree{dataBuildGradle, map[string]*bintree{}},
		"function.json": &bintree{dataFunctionJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

